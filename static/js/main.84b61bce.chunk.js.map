{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","helpers/normalizeMovie.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setMovies","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","hasError","setHasError","_useState5","_useState6","setMovie","_useState7","_useState8","isLoadingData","setIsLoadingData","_Fragment","htmlFor","type","id","placeholder","classNames","value","onChange","event","newQuery","target","disabled","onClick","preventDefault","normalizedQuery","trim","toLowerCase","fetch","concat","then","res","json","catch","Response","Error","getMovie","movieFromServer","inputData","Title","Plot","imdbID","Poster","normalizeMovie","finally","newIMDB","find","mov","newChosenMovies","_toConsumableArray","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84b61bce.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={\n            movie.imgUrl\n            || 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          }\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img src=\"images/imdb-logo.jpeg\" alt=\"imdb\" />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">\n            {movie.title}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} movie={movie} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api';\nimport { normalizeMovie } from '../../helpers/normalizeMovie';\n\ntype Props = {\n  movies: Movie[];\n  setMovies: (movies: Movie[]) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ movies, setMovies }) => {\n  const [query, setQuery] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoadingData, setIsLoadingData] = useState(false);\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = event.target.value;\n\n    setHasError(false);\n    setQuery(newQuery);\n  };\n\n  const handleSearch = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    const normalizedQuery = query.trim().toLowerCase();\n\n    setIsLoadingData(true);\n\n    getMovie(normalizedQuery)\n      .then((movieFromServer) => {\n        if ('Error' in movieFromServer) {\n          setHasError(true);\n        } else {\n          setMovie(normalizeMovie(movieFromServer));\n        }\n      })\n      .catch(() => {\n        setHasError(true);\n      })\n      .finally(() => setIsLoadingData(false));\n  };\n\n  const handleAddToList = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (movie) {\n      const newIMDB = movie.imdbId;\n\n      if (!movies.find((mov) => mov.imdbId === newIMDB)) {\n        const newChosenMovies = [...movies, movie];\n\n        setMovies(newChosenMovies);\n      }\n\n      setMovie(null);\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': hasError })}\n              value={query}\n              onChange={handleQuery}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button', 'is-light', {\n                'is-loading': isLoadingData,\n              })}\n              disabled={!query}\n              onClick={handleSearch}\n            >\n              {movie ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddToList}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=39011c39';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then((res) => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\nconst BASE_MOVIE_URL = 'https://www.imdb.com/title';\n\nexport function normalizeMovie(inputData: MovieData) {\n  const { Title, Plot, imdbID } = inputData;\n  let { Poster } = inputData;\n\n  if (Poster === 'N/A') {\n    Poster = '';\n  }\n\n  const movie: Movie = {\n    title: Title,\n    description: Plot,\n    imdbId: imdbID,\n    imdbUrl: `${BASE_MOVIE_URL}/${imdbID}`,\n    imgUrl: Poster,\n  };\n\n  return movie;\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          setMovies={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}